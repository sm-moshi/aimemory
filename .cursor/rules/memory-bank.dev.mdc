---
description:
globs:
alwaysApply: true
---
# 🛠  Internal Memory‑Bank Rules (Development)

> **Not shipped** in production builds.
> Loaded only while **developing** the AI Memory Extension.

## Purpose

* Preserve architecture & TODOs across Cursor resets.
* Permit helper MCP tools for research/reasoning.
* Avoid pay‑walled services ⚠️
* If you do research and want to search for anything about a year, use 2025 and NOT 2024
* Use MCP tools where you ever needed - as clear-thoughts for reasoning/thinking/evaluating.
* THE memory-bank/ folder in this project isn't the end-users memory-bank, but yours!

---

## Must‑Load on Reset

* `core/projectbrief.md` – vision
* `core/activeContext.md` – current focus
* `progress/current.md` – in‑flight tasks

Call **`read-memory-bank-files()`** first thing.

---

## 🛠 Research-Validated Helper Tools

> For reasoning tools, selection strategy, and detailed usage patterns see **@004-ai-reasoning-strategy.mdc**. The sections below keep only development-specific notes not covered elsewhere.

### Core Reasoning & Documentation Tools ✅

*(See @004-ai-reasoning-strategy.mdc for full list of validated MCP servers, tool selection criteria, and usage patterns.)*

---

## Development Tool Status

### MCP Memory Bank Tools
| Tool | Dev Status | Production Ready | Notes |
| ---- | ---------- | ---------------- | ----- |
| initialize-memory-bank | ✅ Complete | ✅ Yes | Self-healing initialization |
| read-memory-bank-files | ✅ Complete | ✅ Yes | Tiered loading strategy |
| update-memory-bank-file | ✅ Complete | ✅ Yes | Safe file operations |
| get-memory-bank-metadata | ⚠️ Implemented | ❌ Testing needed | Mock tests failing |
| append-note | 🧪 Prototype | ❌ Not ready | Needs design review |
| update-current-plan | 🗓 Planned | ❌ Not started | Roadmap item |

### Extension Integration Status
| Component | Status | Notes |
| --------- | ------ | ----- |
| MCP Server Integration | ✅ Production | stdio transport, error boundaries |
| Webview Communication | ✅ Production | postMessage patterns, CSP compliance |
| File Operations | ✅ Production | Path validation (streaming disabled) |
| Error Handling | ✅ Production | AsyncResult patterns, self-healing |
| Testing Framework | ⚠️ Partial | Needs end-to-end validation |

---

## 🧠 Implementation Notes & Best Practices

### Development-Specific Practices ✅
* **Local Memory Bank**: THE memory-bank/ folder in this project is for development, not end-users
* **No Auto-Update**: Changes to rules or service logic must **NOT** trigger automatic updates to local memory-bank/ folder
* **Date Accuracy**: ALWAYS run `date` command before updating any dates
* **Cross-Reference**: Maintain consistency between rules and memory bank content
* **Research Integration**: Update memory bank with insights from reasoning sessions

*For general development practices, see other rule files. This file focuses on development-only concerns.*

## Release Checklist

### Pre-Production Steps
- [ ] Swap to neutral user ruleset (remove development tools)
- [ ] Solve all `// TODO:` markers in codebase
- [ ] Complete metadata system testing and validation
- [ ] Run full end-to-end testing suite
- [ ] Validate VSIX packaging and installation
- [ ] Security audit of webview and MCP integration
- [ ] Performance benchmarking under load
- [ ] Documentation review and accuracy check

### Quality Gates
- [ ] All tests passing (unit, integration, E2E)
- [ ] Code coverage >80% with meaningful tests
- [ ] No security vulnerabilities in dependencies
- [ ] Memory bank rules consistency validated
- [ ] Cross-platform compatibility verified

---

**Integration Status**: Actively validated against production codebase patterns
**Last Updated**: 2025-06-12 (streamlined, removed duplicates from other rule files)
