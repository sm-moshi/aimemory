---
description: Cursor Memory Bank Rules
globs:
alwaysApply: true
---
# Cursor Memory Bank Rules (AI Memory v0.6.0+)

Welcome to the AI Memory system. This file acts as the blueprint for how Cursor understands and works with your Memory Bank. It will be transformed automatically into `.cursor/rules/memory-bank.mdc` by the AI Memory extension on first initialization.

## 🧠 Reset & Load

- On every session reset, run `read-memory-bank-files()`
- Always load:
  - `core/*.md`
  - `progress/current.md`, `progress/history.md`
  - `systemPatterns/index.md`
  - `techContext/index.md`
- Other files are loaded lazily when contextually required.
- Failover and retry logic should be applied if a file is missing or corrupted.

## 🔥 Memory Tiering

| Tier | Files                              | Access Rule               |
| ---- | ---------------------------------- | ------------------------- |
| Hot  | `core/*.md`, `progress/current.md` | Always load immediately   |
| Warm | `systemPatterns/index.md`          | Load on plan or diagnosis |
| Cold | >30KB files, old history           | Load chunked or deferred  |

## 📏 File Size Guidelines

- `< 15KB`: Load freely
- `15–30KB`: Warn, consider chunking
- `> 30KB`: Chunked access required via `chunkIndex`
- Limit to 5 parallel loads
- Warn if more than 8 files are read in parallel

## 🔐 Safety Rules

- Never overwrite `projectBrief.md` or `productContext.md`
- NEVER write to any `index.md` file
- Always prompt before modifying `progress/current.md`
- CHUNK read required for any file > 30KB
- NEVER DELETE any memory-bank file without explicit user approval
- Mark all dangerous operations in logs and surface in UI if available

## 📂 Memory Bank Structure

```mermaid
flowchart TD
    CORE[Core Index] --> PB[projectbrief.md]
    CORE --> PC[productContext.md]
    CORE --> AC[activeContext.md]

    subgraph Modules
      SP_IDX[systemPatterns/index.md]
      SP_IDX --> SP_ARCH[architecture.md]
      SP_IDX --> SP_PTRN[patterns.md]
      SP_IDX --> SP_SCAN[scanning.md]

      TC_IDX[techContext/index.md]
      TC_IDX --> TC_STACK[stack.md]
      TC_IDX --> TC_DEPS[dependencies.md]
      TC_IDX --> TC_ENV[environment.md]

      PR_IDX[progress/index.md]
      PR_IDX --> PR_CUR[current.md]
      PR_IDX --> PR_HIST[history.md]
    end
```

## 🧭 Plan Mode

- `plannerMode: true`
- Use `getPlanSummary()` to scan `activeContext.md` and `current.md`
- ALWAYS ask 4–6 clarifying questions before proposing a new plan
- Validate all assumptions against `productContext.md`
- Present plan clearly and apply using `update-current-plan()`
- NEVER edit or overwrite without explicit user confirmation

## 🛠 Required MCP Tools

| Tool                       | Purpose and Invocation         |
| -------------------------- | ------------------------------ |
| `read-memory-bank-files()`   | Full memory scan on session reset |
| `get-memory-bank-file()`     | Targeted file read by path or id |
| `update-memory-bank-file()`  | Append or replace file contents safely |
| `get-memory-bank-metadata()` | Scan file list, size, timestamps |
| `initialize-memory-bank()`   | Generate starter structure and files |
| `update-current-plan()`      | Controlled update of current roadmap |

## 📜 Documentation Flow

```mermaid
flowchart TD
    Start[Trigger] --> Review[Review Files]
    Review --> Summarise[Summarise Current State]
    Summarise --> Clarify[Clarify Next Steps]
    Clarify --> Update[Write Plan or Edits]
```

## 🧠 Notes for Cursor Agent Developers

- Enforce safety rules in UI interactions and MCP tools.
- Use metadata to filter large or outdated files.
- Confirm edits and deletions through prompts or modals.
- Cross-check edits against `core/activeContext.md` and `productContext.md` when `plannerMode` is enabled.

## 🛠️ Thoughtful Use of Available MCP Tools

To ensure robust, up-to-date, and best-practice solutions when working with the memory bank or extension, the AI agent should thoughtfully use all available MCP tools in this environment, including but not limited to:

- **clear-thought**: For step-by-step, chain-of-thought reasoning, planning, and hypothesis validation. Use this tool to break down complex problems, validate plans, and check for missed edge cases.
- **context7**, **codex-keeper** and/or **docshunter**: For accessing official documentation, best practices, code examples, and checking for deprecations or usage patterns in libraries and frameworks.

### Guidelines

- Use these tools whenever reasoning about complex changes, validating plans, or when up-to-date information is required.
- Prefer tool-assisted reasoning over assumptions, especially for ambiguous or high-impact tasks.
- Document in the memory bank when a tool was used to inform a decision or plan.
- If the user requests, always use the specified tool for their query.

This ensures that all memory bank operations and extension development are grounded in the best available knowledge and practices.

## Implementation Notes & Best Practices

- Self-healing: The extension will auto-create any missing required files/folders on startup or access, using templates. This is considered safe and does not require user consent.
- Consent for sensitive operations: All file overwrites (except self-healing) require user consent. `memory-bank.mdc` may only be regenerated or overwritten with explicit user consent.

This file will be read by `cursor-rules-service.ts` and compiled into a `.mdc` format for rule execution.

Cursor agents should regularly check the .cursor/rules/ directory for other rulesets that may affect project behaviour.

>_Last updated: 2025-05-27 🐹_
