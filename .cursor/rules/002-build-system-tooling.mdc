---
description: Build System, Software Stack & Tooling Rules
globs:
alwaysApply: false
---
# Build System & Tooling Rules

## Build Pipeline Requirements

### Technology Stack
- **Primary Build**: Rollup 4.42+ with SWC plugin for TypeScript compilation
- **Webview Build**: Vite 7+ (see `001-vsix-extension.mdc` for React/webview UX specifics)
- **Code Quality**: Biome 2.0+ for unified linting and formatting
- **Testing**: Vitest 3.2+ with MSW 2.10+ for API mocking
- **Package Manager**: pnpm with workspace configuration

### TypeScript Compilation
- **Primary Compiler**: tsgo via `@typescript/native-preview` for early future compability
- **Editor Integration**: Enable `"typescript.experimental.useTsgo": true` in VS Code/Cursor settings
- **Fallback to tsc**: Use standard `tsc` when tsgo limitations require it:
  - Project references (`--build` mode)
  - Full declaration emit requirements
  - Incremental builds (not yet supported)
- **Module Resolution**: Use `nodenext` or `bundler` (avoid deprecated `node`/`node10`/`node16`)

### Build Targets
- Extension: CommonJS for main process
- MCP CLI: CommonJS for Node.js
- Webview: ES modules for browser

## Configuration Standards

### TypeScript
- Strict mode enabled for main codebase
- Test files: relaxed rules for easier implementation
- Use verbatimModuleSyntax and path mapping
- Multi-config structure with project references

### Code Quality
- Biome: tabs (4 spaces), 120-char lines, double quotes
- Automated fixes: `biome check --write .`

### Testing
- **Unified Vitest Projects**: Single config with extension/webview projects pattern
- Coverage threshold: >80% with V8 provider
- Use `vitest run` flag (not watch mode by default)
- **Centralized mocking**: Standardized VS Code API mocks, avoid scattered vi.mock() overrides
- **Single testing strategy**: Consistent patterns across entire codebase

## Development Workflow

### TypeScript Workflow
- **Type Checking**: Use `tsgo --noEmit` for fast validation
- **Build Scripts**: Default to tsgo, fallback to tsc for unsupported features
- **CI/CD**: Validate both tsgo and tsc compatibility for production builds

### Performance Requirements
- SWC compilation for 20x faster TypeScript processing
- Tree-shaking with ES2022 imports
- Source maps: development only
- HMR: Sub-100ms updates for webview
- Parallel development: watch mode + dev server
- Quality gates: type checking + linting + testing

## Forbidden

### Build Configuration
- No manual compilation/reinstall/restart workflows
- No hardcoded performance benchmarks in rules
- No bypassing quality gates in CI/CD
- No shell: true in child_process operations
- **No over-engineered folder structures**: Follow function-based organization, not arbitrary depth limits

### Dependencies
- Pin critical build tools (Rollup, SWC, Biome) to exact versions; see `package.json` engines block.
- Use overrides for security patches in pnpm
- Commit pnpm-lock.yaml for reproducible builds

## Extension Build Integration

### VS Code Extension Targets
- **Extension Main**: CommonJS for main process (Node.js compatibility)
- **Webview**: ES modules for browser environment
- **MCP CLI**: CommonJS for Node.js standalone execution

### Build System Performance
- **SWC Compilation**: 20x faster TypeScript processing than tsc
- **Tree-shaking**: ES2022 imports with Rollup optimization
- **Bundle Analysis**: Monitor extension activation time <2 seconds
- **Source Maps**: Development only (excluded from production builds)
- **HMR**: Sub-100ms updates for webview development

### Node.js Compatibility (VS Code 1.96.2)
- **Electron 34.5.1** with **Node.js 20.19.0**
- **Breaking Change**: `.bat`/`.cmd` file spawning requires explicit `shell` option
- **Security**: Never use `shell: true` - use explicit arguments with `child_process.spawn`
- **Path Handling**: Validate all file paths to prevent injection attacks

---

**Cross-References:**
#rollup #swc #vite #biome #vitest #tsgo #performance #bundle-optimization #testing-framework #ci-cd #unified-testing #kiss-compliance #electron #nodejs #vscode-api

**See Also:** `001-vsix-extension.mdc` (extension UX/security), `techContext/stack.md` for dependency rationale

Last updated: 2025-06-12
